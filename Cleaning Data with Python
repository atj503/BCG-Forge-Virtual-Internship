import matplotlib.pyplot as plt 
import seaborn as sns 
import pandas as pd 

# Shows plots in jupyter notebook 
%matplotlib inline 
# Set plot style 
sns.set(color_codes=True)

#need to load client_data.csv and price_data.csv into individual dataframes so that we can work with them in Python
client_df = pd.read_csv('./client_data.csv') 
price_df = pd.read_csv('./price_data.csv')

#look at the first 3 rows in the dataset

client_df.head(3)
id channel_sales \ 0 24011ae4ebbe3035111d65fa7c15bc57 foosdfpfkusacimwkcsosbicdxkicaua 11 d29c2c54acc38ff3c0614d0a653813dd 
MISSING 2 764c75f661154dac3a6c254cd082ea7d foosdfpfkusacimwkcsosbicdxkicaua cons_12m cons_gas_12m cons_last_month date_activ 0 0 54946 
date_end \ 0 2013-06-15 2016-06-15 1 2 0 1 2 0 4660 544 0 0 0 2009-08-21 2016-08-30 0 2010-04-16 2016-04-16 date_modif_prod date_renewal 
forecast_cons_12m … has_gas imp_cons \ 2015-11-01 2015-06-23 2009-08-21 2015-08-31 2010-04-16 2015-04-17 0.00 … 189.95 … 
47.96 … t f f 0.0 0.0 0.0 margin_gross_pow_ele margin_net_pow_ele nb_prod_act net_margin \ 25.44 25.44 1 2 16.38 28.60 
num_years_antig 16.38 28.60 2 1 1 678.99 18.89 6.60 origin_up pow_max churn 0 1 2 3 lxidpiddsbxsbosboudacockeimpuepw 43.648 6 
kamkkxfxxuwbdslkwifmmcsiusiuosws 13.800 6 kamkkxfxxuwbdslkwifmmcsiusiuosws 13.856 [3 rows x 26 columns]

#With the client data, we have a mix of numeric and categorical data, which we will need to transform before modelling later

price_df.head(3)
id price_date price_p1_var price_p2_var \ 0 038af19179925da21a25619c5a24b745 2015-01-01 0.151367 1 038af19179925da21a25619c5a24b745 2015-02-01 
2 038af19179925da21a25619c5a24b745 2015-03-01 0.151367 price_p3_var price_p1_fix price_p2_fix 
price_p3_fix 0 1 2 0.0 0.0 44.266931 44.266931 0.0 44.266931 0.151367 0.0 0.0 0.0 0.0 0.0 0.0

#With the price data, it is purely numeric data but we can see a lot of zeros


#Get info on the data types in each dataframe
client_df.info()
<class'pandas.core.frame.DataFrame'> 
RangeIndex:14606entries,0to14605 
Datacolumns(total26columns): #ColumnNon-NullCountDtype---------------------------0id14606non-nullobject 
1channel_sales14606non-nullobject 
2cons_12m14606non-nullint64 
3cons_gas_12m14606non-nullint64 
4cons_last_month14606non-nullint64 
5date_activ14606non-nullobject 
6date_end14606non-nullobject 
7date_modif_prod14606non-nullobject 
8date_renewal14606non-nullobject 
9forecast_cons_12m14606non-nullfloat64 
10forecast_cons_year14606non-nullint64 
11forecast_discount_energy14606non-nullfloat64 
12forecast_meter_rent_12m14606non-nullfloat64 
13forecast_price_energy_p114606non-nullfloat64 
14forecast_price_energy_p214606non-nullfloat64 
15forecast_price_pow_p114606non-nullfloat64 
16has_gas14606non-nullobject 
17imp_cons14606non-nullfloat64 
18margin_gross_pow_ele14606non-nullfloat64 
19margin_net_pow_ele14606non-nullfloat64 
20nb_prod_act14606non-nullint64 
21net_margin14606non-nullfloat64 
22num_years_antig14606non-nullint64 
23origin_up14606non-nullobject 
24pow_max14606non-nullfloat64 
25churn14606non-nullint64 
dtypes:float64(11),int64(7),object(8) 
memoryusage:2.9+MB

price_df.info()
<class'pandas.core.frame.DataFrame'> 
RangeIndex:193002entries,0to193001 
Datacolumns(total8columns): #ColumnNon-NullCountDtype---------------------------0id193002non-nullobject 
1price_date193002non-nullobject 
2price_p1_var193002non-nullfloat64 
3price_p2_var193002non-nullfloat64 
4price_p3_var193002non-nullfloat64 3
5 price_p1_fix 193002 non-null float64 
6 price_p2_fix 193002 non-null float64 
7 price_p3_fix 193002 non-null float64 
dtypes: float64(6), object(2) 
memory usage: 11.8+ MB

#the datetime related columns are not currently in datetime format. We will need to convert these later


client_df.describe()
price_df.describe()
#look at some statistics about the datasets

def plot_stacked_bars(dataframe, title_, size_=(18, 10), rot_=0, legend_="upper␣ →right"):
  """ Plot stacked bars with annotations """ 
  ax = dataframe.plot( 
  kind="bar", 
  stacked=True, 
  figsize=size_, 
  rot=rot_, 
  title=title_ ) 
  # Annotate bars 
  annotate_stacked_bars(ax, textsize=14) 
  # Rename 
  legend plt.legend(["Retention", "Churn"], loc=legend_) 
  # Labels 
  plt.ylabel("Company base (%)") plt.show() 
  
  
def annotate_stacked_bars(ax, pad=0.99, colour="white", textsize=13): """ Add value annotations to the bars """ 
  # Iterate over the plotted rectanges/bars 
  for p in ax.patches: 
  # Calculate annotation 
  value = str(round(p.get_height(),1)) 
  # If value is 0 do not annotate 
  if value == '0.0': continue ax.annotate( value, 6((p.get_x()+ p.get_width()/2)*pad-0.05, 
  (p.get_y()+p.get_height()/ →2)*pad), color=colour, size=textsize)
  
#this is the beginning stages of analyzing data, next will be creating visualizations to provide context to the data
  
  
  
  


